{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useScrollbarWidth","React","useState","scrollbarWidth","setScrollbarWidth","useEffect","tester","document","createElement","style","width","body","append","onResize","parseInt","getComputedStyle","window","addEventListener","App","containerMaxWidth","setContainerMaxWidth","containerMargin","setContainerMargin","gridColumns","setGridColumns","gridGutter","setGridGutter","Fragment","className","type","value","min","max","onChange","event","Number","target","gridTemplateColumns","Array","from","length","_","index","map","join","key","backgroundColor","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.604b5807.chunk.js","sourcesContent":["import React from \"react\";\n\nconst useScrollbarWidth = () => {\n  const [scrollbarWidth, setScrollbarWidth] = React.useState(0);\n\n  React.useEffect(() => {\n    const tester = document.createElement(\"div\");\n    tester.style.width = \"calc(100vw - 100%)\";\n    document.body.append(tester);\n\n    const onResize = () => {\n      setScrollbarWidth(parseInt(getComputedStyle(tester).width));\n    };\n    window.addEventListener(\"resize\", onResize);\n    onResize();\n  }, []);\n\n  return scrollbarWidth;\n};\n\nfunction App() {\n  const [containerMaxWidth, setContainerMaxWidth] = React.useState(1200);\n  const [containerMargin, setContainerMargin] = React.useState(16);\n  const [gridColumns, setGridColumns] = React.useState(12);\n  const [gridGutter, setGridGutter] = React.useState(16);\n  const scrollbarWidth = useScrollbarWidth();\n\n  return (\n    <React.Fragment>\n      <style>{`\n  :root {\n    --container-max-width: ${containerMaxWidth};\n    --container-margin: ${containerMargin};\n    --grid-columns:${gridColumns};\n    --grid-gutter:${gridGutter};\n  }\n\n  @media (min-width: ${containerMaxWidth +\n    containerMargin * 2 +\n    scrollbarWidth}px) {\n    html {\n      font-size: calc(1em + (100vw - ${containerMaxWidth +\n        containerMargin * 2}px) * 0.005);\n    }\n  }\n`}</style>\n\n      <div className=\"stack -lg\">\n        <div className=\"container\">\n          <h1>Gridの構成要素</h1>\n        </div>\n\n        <div className=\"stack -md\">\n          <div className=\"container\">\n            <h2>Container</h2>\n          </div>\n\n          <div className=\"guide-container\">\n            <div className=\"guide-container-spacer\"></div>\n            <div className=\"guide-container-gap\"></div>\n            <div className=\"guide-container-content\"></div>\n            <div className=\"guide-container-gap\"></div>\n            <div className=\"guide-container-spacer\"></div>\n          </div>\n\n          <div className=\"container\">\n            <div className=\"variables\">\n              <div className=\"variables-key\">\n                <code>--container-max-width:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={containerMaxWidth}\n                  min={0}\n                  max={9999}\n                  onChange={event =>\n                    setContainerMaxWidth(Number(event.target.value))\n                  }\n                />{\" \"}\n                px\n              </div>\n              <div className=\"variables-key\">\n                <code>--container-margin:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={containerMargin}\n                  min={0}\n                  max={9999}\n                  onChange={event =>\n                    setContainerMargin(Number(event.target.value))\n                  }\n                />{\" \"}\n                px\n              </div>\n            </div>\n          </div>\n\n          <div className=\"container\">\n            <pre>\n              <code>{`<div class=\"container\">\n  …\n</div>`}</code>\n            </pre>\n          </div>\n        </div>\n\n        <div className=\"stack -md\">\n          <div className=\"container\">\n            <h2>Columns</h2>\n          </div>\n\n          <div\n            className=\"guide-grid\"\n            style={{\n              gridTemplateColumns: Array.from(\n                { length: gridColumns },\n                (_, index) => index\n              )\n                .map(\n                  index =>\n                    `${index ? \"calc(var(--grid-gutter) / 16 * 1rem) \" : \"\"}1fr`\n                )\n                .join(\" \")\n            }}\n          >\n            {Array.from({ length: gridColumns }, (_, index) => index).map(\n              index => (\n                <React.Fragment key={index}>\n                  {index ? <div className=\"guide-grid-gutter\" /> : null}\n                  <div className=\"guide-grid-column\" />\n                </React.Fragment>\n              )\n            )}\n          </div>\n\n          <div className=\"container\">\n            <div className=\"variables\">\n              <div className=\"variables-key\">\n                <code>--grid-columns:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={gridColumns}\n                  min={0}\n                  max={9999}\n                  onChange={event => setGridColumns(Number(event.target.value))}\n                />\n              </div>\n              <div className=\"variables-key\">\n                <code>--grid-gutter:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={gridGutter}\n                  min={0}\n                  max={9999}\n                  onChange={event => setGridGutter(Number(event.target.value))}\n                />{\" \"}\n                px\n              </div>\n            </div>\n          </div>\n\n          <div className=\"container\">\n            <pre>\n              <code>{`<div class=\"row\">\n  <div class=\"col -s3\">…</div>\n  <div class=\"col -s3\">…</div>\n  <div class=\"col -s3\">…</div>\n</div>`}</code>\n            </pre>\n          </div>\n        </div>\n\n        <div className=\"stack -md\">\n          <div className=\"container\">\n            <h2>Composited</h2>\n          </div>\n\n          <div className=\"guide-container\">\n            <div className=\"guide-container-spacer\"></div>\n            <div className=\"guide-container-gap\"></div>\n            <div\n              className=\"guide-container-content\"\n              style={{ backgroundColor: \"transparent\" }}\n            >\n              <div\n                className=\"guide-grid\"\n                style={{\n                  gridTemplateColumns: Array.from(\n                    { length: gridColumns },\n                    (_, index) => index\n                  )\n                    .map(\n                      index =>\n                        `${\n                          index ? \"calc(var(--grid-gutter) / 16 * 1rem) \" : \"\"\n                        }1fr`\n                    )\n                    .join(\" \")\n                }}\n              >\n                {Array.from({ length: gridColumns }, (_, index) => index).map(\n                  index => (\n                    <React.Fragment key={index}>\n                      {index ? <div className=\"guide-grid-gutter\" /> : null}\n                      <div className=\"guide-grid-column\" />\n                    </React.Fragment>\n                  )\n                )}\n              </div>\n            </div>\n            <div className=\"guide-container-gap\"></div>\n            <div className=\"guide-container-spacer\"></div>\n          </div>\n\n          <div className=\"container\">\n            <div className=\"variables\">\n              <div className=\"variables-key\">\n                <code>--container-max-width:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={containerMaxWidth}\n                  min={0}\n                  max={9999}\n                  onChange={event =>\n                    setContainerMaxWidth(Number(event.target.value))\n                  }\n                />{\" \"}\n                px\n              </div>\n              <div className=\"variables-key\">\n                <code>--container-margin:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={containerMargin}\n                  min={0}\n                  max={9999}\n                  onChange={event =>\n                    setContainerMargin(Number(event.target.value))\n                  }\n                />{\" \"}\n                px\n              </div>\n              <div className=\"variables-key\">\n                <code>--grid-columns:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={gridColumns}\n                  min={0}\n                  max={9999}\n                  onChange={event => setGridColumns(Number(event.target.value))}\n                />\n              </div>\n              <div className=\"variables-key\">\n                <code>--grid-gutter:</code>\n              </div>\n              <div className=\"variables-value\">\n                <input\n                  type=\"number\"\n                  value={gridGutter}\n                  min={0}\n                  max={9999}\n                  onChange={event => setGridGutter(Number(event.target.value))}\n                />{\" \"}\n                px\n              </div>\n            </div>\n          </div>\n\n          <div className=\"container\">\n            <pre>\n              <code>{`<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col -s3\">…</div>\n    <div class=\"col -s3\">…</div>\n    <div class=\"col -s3\">…</div>\n  </div>\n</div>`}</code>\n            </pre>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}